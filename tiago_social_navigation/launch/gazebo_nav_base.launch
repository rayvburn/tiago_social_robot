<?xml version="1.0" encoding="UTF-8"?>
<!-- Launch designated for TIAGo navigation basic setup -->
<launch>
  <!-- Based on: tiago_simulation/tiago_2dnav_gazebo/launch/navigation.launch -->
  <!-- === ARGUMENTS ========================================================================== -->
  <arg name="public_sim" default="true"/>
  <arg name="robot_namespace" default=""/>
  <!-- localization / mapping -->
  <arg name="state" default="localization"/>
  <arg name="planner" default="base"/>
  <arg name="global_planner" default="navfn"/>
  <arg name="local_planner"  default="$(eval 'teb' if (arg('public_sim') or arg('base_type')=='omni_base') else 'pal')"/>
  <arg name="localization" default="amcl"/>
  <arg name="mapping" default="gmapping"/>
  <arg name="octomap" default="false"/>
  <arg name="rgbd_sensors" default="false"/>
  <arg name="multiple" default="false"/>
  <!-- Scan topic name; namespacing (for multiple robots) is handled in other files -->
  <arg name="scan_topic" default="scan"/>
  <arg name="map_topic" default="map"/>

  <!-- path to the directory under 'config' and YAML files are placed in -->
  <arg name="config_base_path" default="$(find tiago_social_navigation)"/>
  <!-- specific robot model setup -->
  <arg name="laser_model" default="sick-571"/>
  <!-- NOTE: 'omni_base' will require different config and will likely not run properly -->
  <arg name="base_type" default="pmb2"/>
  
  <!-- localization prerequisites. NOTE: if set to 'none', map server will not be started -->
  <arg name="map" default="$(env HOME)/.pal/tiago_maps/config/map.yaml"/>
  
  <!-- initial pose estimation if 'state' is set to 'localization' -->
  <!-- replaces PAL-specific design that uses '$(env HOME)/.pal/pose.yaml' to load initial pose estimate -->
  <arg name="localization_pose_estimate" default="$(arg config_base_path)/config/localization/pose_estimate.yaml"/>
  
  <!-- file suffixes -->
  <arg name="base_type_suffix" value="" unless="$(eval arg('base_type') == 'omni_base')"/>
  <arg name="base_type_suffix" value="_omni" if="$(eval arg('base_type') == 'omni_base')"/>
  <arg name="sim_suffix" value="" unless="$(arg public_sim)"/>
  <arg name="sim_suffix" value="_public_sim" if="$(arg public_sim)"/>

  <!-- Paths to configuration files -->
  <arg name="localization_config" default="$(arg config_base_path)/config/localization/$(arg localization)$(arg base_type_suffix).yaml"/>
  <arg name="mapping_config" default="$(arg config_base_path)/config/mapping/$(arg mapping)$(arg base_type_suffix).yaml"/>
  <arg name="state_machine_config" default="$(arg config_base_path)/config/state_machine/state_machine$(arg sim_suffix)$(arg base_type_suffix).yaml"/>

  <!-- === NODES ============================================================================== -->
  <!-- Localization or Mapping state -->
  <node pkg="tiago_social_navigation" type="navigation.sh" name="navigation"
        args="tiago $(arg state) $(arg localization) $(arg mapping) $(arg map) $(arg octomap) $(arg scan_topic) $(arg laser_model) $(arg base_type) $(arg multiple) $(arg robot_namespace) $(arg map_topic) $(arg localization_pose_estimate) $(arg localization_config) $(arg mapping_config)" output="screen"/>

  <!-- Navigation State Machine -->
  <!-- Custom '2dnav_state_machine' to allow override of 'config' parameter -->
  <include file="$(find tiago_social_navigation)/launch/2dnav_state_machine.launch">
    <arg name="state" value="$(arg state)"/>
    <arg name="public_sim" value="$(arg public_sim)"/>
    <arg if="$(arg multiple)" name="base_frame" value="/$(arg robot_namespace)/base_footprint"/>
    <arg if="$(arg multiple)" name="map_frame" value="/$(arg robot_namespace)/map"/>
    <arg name="base_type" value="$(arg base_type)"/>
	<arg name="config" value="$(arg state_machine_config)"/>
  </include>

  <!-- Planning -->
  <include file="$(find tiago_2dnav)/launch/move_$(arg planner).launch">
    <arg name="global_planner" value="$(arg global_planner)"/>
    <arg name="local_planner"  value="$(arg local_planner)"/>
    <arg name="public_sim"     value="$(arg public_sim)"/>
    <arg name="rgbd_sensors"   value="$(arg rgbd_sensors)"/>
    <arg name="robot_namespace"      value="$(arg robot_namespace)"/>
    <arg name="multiple"       value="$(arg multiple)"/>
    <arg name="config_base_path" value="$(arg config_base_path)"/>
    <arg name="base_type"       value="$(arg base_type)"/>
  </include>

  <!-- VO map server -->
  <group unless="$(arg public_sim)">
    <include file="$(find pal_vo_server)/launch/vo_server.launch">
      <arg name="fill_with_unknown" value="true"/>
      <arg name="vo_resolution" value="0.3"/>
    </include>
  </group>

  <!-- Robot Pose Publisher -->
  <include file="$(find robot_pose)/launch/robot_pose.launch">
    <arg name="robot_prefix"      value="$(arg robot_namespace)"/>
  </include>

  <group if="$(eval arg('base_type') == 'omni_base')">
    <!-- Laser Scan Merger -->
    <node pkg="ira_laser_tools" name="laserscan_multi_merger" type="laserscan_multi_merger" output="screen"
      launch-prefix="bash -c 'sleep 5; $0 $@' ">
      <param name="destination_frame" value="virtual_base_laser_link"/>
      <param name="cloud_destination_topic" value="/merged_cloud"/>
      <param name="scan_destination_topic" value="/scan_raw"/>
      <param name="laserscan_topics" value ="/scan_front_raw /scan_rear_raw" /> 
      <param name="time_increment" value ="0.0" /> 
      <param name="scan_time" value ="0.0" /> 
      <param name="range_min" value ="0.05" /> 
      <param name="range_max" value ="25.0" /> 
      <param name="angle_min" value ="-3.1459" /> 
      <param name="angle_max" value ="3.1459" /> 
      <param name="angle_increment" value ="0.005769" /> 
    </node>
  </group>

  <!-- Laser filter (empty for public sim) -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain">
    <rosparam file="$(find tiago_laser_sensors)/config/$(arg laser_model)_filter.yaml" 
              command="load" 
              unless="$(eval arg('public_sim') or arg('multiple'))"/> 
    <remap from="scan"          to="scan_raw"/>
    <remap from="scan_filtered" to="scan"/>
  </node>

</launch>
