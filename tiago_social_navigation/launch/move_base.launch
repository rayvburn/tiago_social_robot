<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Based on: pal_navigation_cfg_public/pal_navigation_cfg_tiago/launch/move_base.launch -->
  <!-- Provide capabilities to run `move_base`-like node from other package than the default one -->
  <arg name="move_base_pkg" default="move_base"/>
  <arg name="move_base_type" default="move_base"/>

  <arg name="global_planner" default="global_planner"/>
  <arg name="local_planner"  default="pal"/>

  <arg name="costmap_contexts"  default="social"/>
  <arg name="costmap_contexts_suffix" value="_$(arg costmap_contexts)"/>
  <arg name="allow_clearing_map_obstacles" default="true"/>

  <arg name="odom"    default="/mobile_base_controller/odom"/>
  <arg name="subtype" default=""/>
  <arg name="cmd_vel" default="/nav_vel"/>

  <arg name="debug"      default="false"/>
  <arg name="launch_prefix" value="gdb -ex run --args"     if="$(arg debug)"/>
  <arg name="launch_prefix" value=""                   unless="$(arg debug)"/>

  <arg name="config_base_path" default="$(find pal_navigation_cfg_tiago)"/>

  <arg name="public_sim"   default="false"/>
  <arg name="rgbd_sensors"   default="false"/> <!-- do not enable with public_sim -->

  <arg name="sim_suffix" value="_public_sim"     if="$(arg public_sim)"/>
  <arg name="sim_suffix" value=""                unless="$(arg public_sim)"/>
  <arg name="rgbd_suffix" value="_rgbd" if="$(arg rgbd_sensors)"/>
  <arg name="rgbd_suffix" value=""      unless="$(arg rgbd_sensors)"/>
  <arg name="base_type"     default="pmb2"/>
  <arg name="base_type_suffix" value="" unless="$(eval arg('base_type') == 'omni_base')"/>
  <arg name="base_type_suffix" value="_omni" if="$(eval arg('base_type') == 'omni_base')"/>

  <arg name="multiple" default="false"/>
  <arg name="robot_namespace" default=""/>

  <arg name="scan_topic" default="/scan"/>

  <!-- Since `social_navigation` can use planner benchmarking, default log file will be placed in `HOME` directory -->
  <arg name="benchmark_log_file" default="$(env HOME)/log_$(arg global_planner)_$(arg local_planner)_$(arg costmap_contexts).txt" unless="$(arg multiple)"/>
  <arg name="benchmark_log_file" default="$(env HOME)/log_$(arg robot_namespace)_$(arg global_planner)_$(arg local_planner)_$(arg costmap_contexts).txt" if="$(arg multiple)"/>

  <node pkg="$(arg move_base_pkg)" type="$(arg move_base_type)" name="move_base" clear_params="true" output="screen" respawn="true" launch-prefix="$(arg launch_prefix)">
    <remap from="odom"    to="$(arg odom)"/>
    <remap from="cmd_vel" to="$(arg cmd_vel)"/>

    <rosparam command="load" file="$(arg config_base_path)/config/base/common/move_base.yaml"/>
    <rosparam command="load" file="$(arg config_base_path)/config/base/common/recovery_behaviors$(arg rgbd_suffix).yaml"/>
    
    <rosparam command="load" file="$(arg config_base_path)/config/base/common/global_costmap_plugins$(arg costmap_contexts_suffix)$(arg sim_suffix)$(arg rgbd_suffix)$(arg base_type_suffix).yaml"/>
    <rosparam command="load" file="$(arg config_base_path)/config/base/common/global_costmap$(arg sim_suffix)$(arg base_type_suffix).yaml"/>
    <!-- global costmap parameter overwrite -->
    <param name="global_costmap/obstacle_laser_layer/combination_method" value="0" if="$(arg allow_clearing_map_obstacles)"/>
    <param name="global_costmap/obstacle_laser_layer/combination_method" value="1" unless="$(arg allow_clearing_map_obstacles)"/>

    <rosparam command="load" file="$(arg config_base_path)/config/base/common/local_costmap_plugins$(arg costmap_contexts_suffix)$(arg sim_suffix)$(arg rgbd_suffix)$(arg base_type_suffix).yaml"/>
    <rosparam command="load" file="$(arg config_base_path)/config/base/common/local_costmap$(arg sim_suffix)$(arg base_type_suffix).yaml"/>

    <rosparam command="load" file="$(arg config_base_path)/config/base/global_planner/$(arg global_planner).yaml"/>
    <rosparam command="load" file="$(arg config_base_path)/config/base/$(arg local_planner)/local_planner$(arg base_type_suffix).yaml"/>

    <param if="$(arg multiple)" name="global_costmap/global_frame" value="$(arg robot_namespace)/map"/>
    <param if="$(arg multiple)" name="global_costmap/robot_base_frame" value="$(arg robot_namespace)/base_footprint"/>
    <param if="$(arg multiple)" name="global_costmap/obstacle_laser_layer/base_scan/sensor_frame" value="$(arg robot_namespace)/base_laser_link"/>
    <param if="$(arg multiple)" name="global_costmap/obstacle_rgbd_layer/rgbd_scan/sensor_frame" value="$(arg robot_namespace)/base_footprint"/>
    <param if="$(arg multiple)" name="global_costmap/obstacle_sonar_layer/sonar_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>
    <param if="$(arg multiple)" name="global_costmap/obstacle_sonar_layer/sonar_max_range_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>
    <param if="$(arg multiple)" name="global_costmap/obstacle_vo_layer/vo_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>

    <param if="$(arg multiple)" name="local_costmap/global_frame" value="$(arg robot_namespace)/odom"/>
    <param if="$(arg multiple)" name="local_costmap/robot_base_frame" value="$(arg robot_namespace)/base_footprint"/>
    <param if="$(arg multiple)" name="local_costmap/obstacle_laser_layer/base_scan/sensor_frame" value="$(arg robot_namespace)/base_laser_link"/>
    <param if="$(arg multiple)" name="local_costmap/obstacle_rgbd_layer/rgbd_scan/sensor_frame" value="$(arg robot_namespace)/base_footprint"/>
    <param if="$(arg multiple)" name="local_costmap/obstacle_sonar_layer/sonar_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>
    <param if="$(arg multiple)" name="local_costmap/obstacle_sonar_layer/sonar_max_range_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>
    <param if="$(arg multiple)" name="local_costmap/obstacle_vo_layer/vo_cloud/sensor_frame" value="$(arg robot_namespace)/base_link"/>

    <param if="$(arg multiple)" name="PalLocalPlanner/robot_namespace" value="$(arg robot_namespace)"/>
    <param if="$(arg multiple)" name="local_planner/laser_frame" value="$(arg robot_namespace)/base_laser_link"/>
    <param if="$(arg multiple)" name="local_planner/base_frame" value="$(arg robot_namespace)/base_link"/>

    <!-- sensor topic selection -->
    <param name="global_costmap/obstacle_laser_layer/base_scan/topic" value="$(arg scan_topic)"/>
    <param name="local_costmap/obstacle_laser_layer/base_scan/topic" value="$(arg scan_topic)"/>

    <!-- In case of planner benchmarking -->
    <param name="srpb/log_filename" value="$(arg benchmark_log_file)"/>
    <!-- data collected in 'map' frame aggregates floating TF odom->map, provides more accurate data visualisation -->
    <param name="srpb/log_frame_id" value="map"/>
  </node>

  <arg name="debug_rgbd" default="false"/>
  <group if="$(arg debug_rgbd)">
    <node pkg="costmap_2d" type="costmap_2d_markers" name="costmap_2d_markers_global">
      <remap from="voxel_grid" to="move_base/global_costmap/obstacle_rgbd_layer/voxel_grid"/>
      <remap from="visualization_marker" to="voxel_grid_global_marker"/>
    </node>

    <node pkg="costmap_2d" type="costmap_2d_markers" name="costmap_2d_markers_local">
      <remap from="voxel_grid" to="move_base/local_costmap/obstacle_rgbd_layer/voxel_grid"/>
      <remap from="visualization_marker" to="voxel_grid_local_marker"/>
    </node>
  </group>

  <!-- Launch extra nodes/interfaces for a specific local planner -->
  <include file="$(find tiago_social_navigation)/launch/algorithms/local_planner_$(arg local_planner).launch"/>

</launch>
